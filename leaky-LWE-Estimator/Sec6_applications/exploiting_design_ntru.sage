#!/usr/bin/sage -python
# -*- coding: latin-1 -*-

load("../framework/instance_gen.sage")

verbosity = 0
report_every = None

"""  Example
Uncomment the following to get the detailed computation
"""
# verbosity = 2
# report_every = 20

for params in [ 'toy', 'ntruhps2048509', 'ntruhps2048677', 'ntruhps4096821']:

  logging("Set of parameters: " + params, style="HEADER")
  if params == 'toy':
    n = 157
    q = 2048

  if params == 'ntruhps2048509':
    n = 509
    q = 2048

  elif params == 'ntruhps2048677':
    n = 677
    q = 2048

  elif params == 'ntruhps4096821':
    n = 821
    q = 4096

  hamming_weight = (q / 16 - 1)

  if q / 8 - 2 <= 2 * n / 3:
      hamming_weight = (q / 16 - 1)
  else:
      hamming_weight = floor(n / 3)
  nb_of_ones_in_Df = RR(n / 3) # Nb of "+1" in a poly of Df (in average)
  nb_of_ones_in_Dg = RR(hamming_weight) # Nb of "+1" in a poly of Dg

  silent = (verbosity==0)

  # Assessement of the attack without hint
  A, b, dbdd = initialize_NTRU_instance(DBDD_predict_diag,
                                        n, q, nb_of_ones_in_Df, nb_of_ones_in_Dg,
                                       verbosity=verbosity)
  dbdd.integrate_q_vectors(q, indices=range(0, 2*n))
  
  (beta, _) = dbdd.estimate_attack(probabilistic=False)
  logging("Attack without hint \t\t(GSA+Intersect):\t  %3.2f bikz" % beta, style="VALUE")

  (beta, _) = dbdd.estimate_attack(probabilistic=True, ignore_lift_proba=True, silent=silent)
  logging("Attack without hint \t\t(Simulator+Proba):\t  %3.2f bikz" % beta, style="VALUE")
  print()
  # Assessement of the attack with hint

  A, b, dbdd = initialize_NTRU_instance(DBDD_predict,
                                        n, q, nb_of_ones_in_Df, nb_of_ones_in_Dg,
                                        verbosity=verbosity)

  v = vec([0 if i < n else 1 for i in range(2*n)])
  dbdd.integrate_perfect_hint(v, 0)
  dbdd.integrate_q_vectors(q, indices=range(0, n))
  (beta, _) = dbdd.estimate_attack(probabilistic=False)
  logging("Attack with hint \t\t(GSA+Intersect):\t  %3.2f bikz" % beta, style="VALUE")

  (beta, _) = dbdd.estimate_attack(probabilistic=True, ignore_lift_proba=True, silent=silent)
  logging("Attack with hint \t\t(Simulator+Proba):\t  %3.2f bikz" % beta, style="VALUE")

  print()
  (beta, _) = dbdd.estimate_attack(probabilistic=True, ignore_lift_proba=True, number_targets=n, silent=silent)
  logging("Attack with hint+symmetry \t(Simulator+Proba):\t  %3.2f bikz" % beta, style="VALUE")
  A, b, dbdd = initialize_NTRU_instance(DBDD_predict,
                                        n, q, nb_of_ones_in_Df, nb_of_ones_in_Dg,
                                        verbosity=verbosity)
  print()
  # Assessement of the attack with hint

  v = vec([0 if i < n else 1 for i in range(2*n)])
  M = identity_matrix(2*n)
  dbdd.integrate_perfect_hint(v, 0)
  dbdd.integrate_perfect_hint(vec(M[-1]), 0)
  dbdd.integrate_perfect_hint(vec(M[-2]), 0)
  dbdd.integrate_perfect_hint(vec(M[-3]), 0)
  dbdd.integrate_perfect_hint(vec(M[-4]), 0)
  dbdd.integrate_perfect_hint(vec(M[-5]), 0)
  dbdd.integrate_perfect_hint(vec(M[-6]), 0)
  dbdd.integrate_q_vectors(q, indices=range(0, n))

  (beta, _) = dbdd.estimate_attack(probabilistic=False)
  logging("Attack with hint + 6 guesses \t(GSA+Intersect):\t  %3.2f bikz" % beta, style="VALUE")

  (beta, _) = dbdd.estimate_attack(probabilistic=True, ignore_lift_proba=True, silent=silent)
  logging("Attack with hint + 6 guesses \t(Simulator+Proba):\t  %3.2f bikz" % beta, style="VALUE")
